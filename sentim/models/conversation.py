# coding: utf-8

"""
    Sentim's Emotion APIs

    An emotion recognition api that tells you the emotion of text, and not just the connotation.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: help@sentimllc.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class Conversation(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'conversation': 'list[str]',
        'lang': 'str',
        'ignore_first': 'bool'
    }

    attribute_map = {
        'conversation': 'conversation',
        'lang': 'lang',
        'ignore_first': 'ignore_first'
    }

    def __init__(self, conversation=None, lang=None, ignore_first=None):  # noqa: E501
        """Conversation - a model defined in OpenAPI"""  # noqa: E501

        self._conversation = None
        self._lang = None
        self._ignore_first = None
        self.discriminator = None

        self.conversation = conversation
        self.lang = lang
        if ignore_first is not None:
            self.ignore_first = ignore_first

    @property
    def conversation(self):
        """Gets the conversation of this Conversation.  # noqa: E501

        Conversation as a list of alternating messages, starting with the user.  # noqa: E501

        :return: The conversation of this Conversation.  # noqa: E501
        :rtype: list[str]
        """
        return self._conversation

    @conversation.setter
    def conversation(self, conversation):
        """Sets the conversation of this Conversation.

        Conversation as a list of alternating messages, starting with the user.  # noqa: E501

        :param conversation: The conversation of this Conversation.  # noqa: E501
        :type: list[str]
        """
        if conversation is None:
            raise ValueError("Invalid value for `conversation`, must not be `None`")  # noqa: E501

        self._conversation = conversation

    @property
    def lang(self):
        """Gets the lang of this Conversation.  # noqa: E501

        Language spoken in the conversation as a language code.  # noqa: E501

        :return: The lang of this Conversation.  # noqa: E501
        :rtype: str
        """
        return self._lang

    @lang.setter
    def lang(self, lang):
        """Sets the lang of this Conversation.

        Language spoken in the conversation as a language code.  # noqa: E501

        :param lang: The lang of this Conversation.  # noqa: E501
        :type: str
        """
        if lang is None:
            raise ValueError("Invalid value for `lang`, must not be `None`")  # noqa: E501

        self._lang = lang

    @property
    def ignore_first(self):
        """Gets the ignore_first of this Conversation.  # noqa: E501

        If true, only the last chatbot or user message will be scored. Primarily used for stitching together long conversations that exceed the max conversation length. Default: false.  # noqa: E501

        :return: The ignore_first of this Conversation.  # noqa: E501
        :rtype: bool
        """
        return self._ignore_first

    @ignore_first.setter
    def ignore_first(self, ignore_first):
        """Sets the ignore_first of this Conversation.

        If true, only the last chatbot or user message will be scored. Primarily used for stitching together long conversations that exceed the max conversation length. Default: false.  # noqa: E501

        :param ignore_first: The ignore_first of this Conversation.  # noqa: E501
        :type: bool
        """

        self._ignore_first = ignore_first

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Conversation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
