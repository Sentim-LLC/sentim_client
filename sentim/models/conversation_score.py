# coding: utf-8

"""
    Sentim's Emotion APIs

    An emotion recognition api that tells you the emotion of text, and not just the connotation.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: help@sentimllc.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class ConversationScore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'index': 'int',
        'score': 'float'
    }

    attribute_map = {
        'index': 'Index',
        'score': 'Score'
    }

    def __init__(self, index=None, score=None):  # noqa: E501
        """ConversationScore - a model defined in OpenAPI"""  # noqa: E501

        self._index = None
        self._score = None
        self.discriminator = None

        if index is not None:
            self.index = index
        if score is not None:
            self.score = score

    @property
    def index(self):
        """Gets the index of this ConversationScore.  # noqa: E501

        The index of the message in the conversation that the score is for.  # noqa: E501

        :return: The index of this ConversationScore.  # noqa: E501
        :rtype: int
        """
        return self._index

    @index.setter
    def index(self, index):
        """Sets the index of this ConversationScore.

        The index of the message in the conversation that the score is for.  # noqa: E501

        :param index: The index of this ConversationScore.  # noqa: E501
        :type: int
        """

        self._index = index

    @property
    def score(self):
        """Gets the score of this ConversationScore.  # noqa: E501

        The score, between 0 and 1, representing how well the user's response to this message matches what we would expect. A lower score indicates that the user's emotional state is worse than we expected, so the message probably need modified.  # noqa: E501

        :return: The score of this ConversationScore.  # noqa: E501
        :rtype: float
        """
        return self._score

    @score.setter
    def score(self, score):
        """Sets the score of this ConversationScore.

        The score, between 0 and 1, representing how well the user's response to this message matches what we would expect. A lower score indicates that the user's emotional state is worse than we expected, so the message probably need modified.  # noqa: E501

        :param score: The score of this ConversationScore.  # noqa: E501
        :type: float
        """

        self._score = score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
