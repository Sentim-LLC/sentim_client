# coding: utf-8

"""
    Sentim's Emotion APIs

    An emotion recognition api that tells you the emotion of text, and not just the connotation.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: help@sentimllc.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six


class EmotionScore(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'anger': 'float',
        'disappointment': 'float',
        'sad': 'float',
        'happy': 'float',
        'joy': 'float',
        'affection': 'float',
        'neutral': 'float',
        'others': 'float'
    }

    attribute_map = {
        'anger': 'Anger',
        'disappointment': 'Disappointment',
        'sad': 'Sad',
        'happy': 'Happy',
        'joy': 'Joy',
        'affection': 'Affection',
        'neutral': 'Neutral',
        'others': 'Others'
    }

    def __init__(self, anger=None, disappointment=None, sad=None, happy=None, joy=None, affection=None, neutral=None, others=None):  # noqa: E501
        """EmotionScore - a model defined in OpenAPI"""  # noqa: E501

        self._anger = None
        self._disappointment = None
        self._sad = None
        self._happy = None
        self._joy = None
        self._affection = None
        self._neutral = None
        self._others = None
        self.discriminator = None

        if anger is not None:
            self.anger = anger
        if disappointment is not None:
            self.disappointment = disappointment
        if sad is not None:
            self.sad = sad
        if happy is not None:
            self.happy = happy
        if joy is not None:
            self.joy = joy
        if affection is not None:
            self.affection = affection
        if neutral is not None:
            self.neutral = neutral
        if others is not None:
            self.others = others

    @property
    def anger(self):
        """Gets the anger of this EmotionScore.  # noqa: E501


        :return: The anger of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._anger

    @anger.setter
    def anger(self, anger):
        """Sets the anger of this EmotionScore.


        :param anger: The anger of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._anger = anger

    @property
    def disappointment(self):
        """Gets the disappointment of this EmotionScore.  # noqa: E501


        :return: The disappointment of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._disappointment

    @disappointment.setter
    def disappointment(self, disappointment):
        """Sets the disappointment of this EmotionScore.


        :param disappointment: The disappointment of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._disappointment = disappointment

    @property
    def sad(self):
        """Gets the sad of this EmotionScore.  # noqa: E501


        :return: The sad of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._sad

    @sad.setter
    def sad(self, sad):
        """Sets the sad of this EmotionScore.


        :param sad: The sad of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._sad = sad

    @property
    def happy(self):
        """Gets the happy of this EmotionScore.  # noqa: E501


        :return: The happy of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._happy

    @happy.setter
    def happy(self, happy):
        """Sets the happy of this EmotionScore.


        :param happy: The happy of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._happy = happy

    @property
    def joy(self):
        """Gets the joy of this EmotionScore.  # noqa: E501


        :return: The joy of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._joy

    @joy.setter
    def joy(self, joy):
        """Sets the joy of this EmotionScore.


        :param joy: The joy of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._joy = joy

    @property
    def affection(self):
        """Gets the affection of this EmotionScore.  # noqa: E501


        :return: The affection of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._affection

    @affection.setter
    def affection(self, affection):
        """Sets the affection of this EmotionScore.


        :param affection: The affection of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._affection = affection

    @property
    def neutral(self):
        """Gets the neutral of this EmotionScore.  # noqa: E501


        :return: The neutral of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._neutral

    @neutral.setter
    def neutral(self, neutral):
        """Sets the neutral of this EmotionScore.


        :param neutral: The neutral of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._neutral = neutral

    @property
    def others(self):
        """Gets the others of this EmotionScore.  # noqa: E501


        :return: The others of this EmotionScore.  # noqa: E501
        :rtype: float
        """
        return self._others

    @others.setter
    def others(self, others):
        """Sets the others of this EmotionScore.


        :param others: The others of this EmotionScore.  # noqa: E501
        :type: float
        """

        self._others = others

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmotionScore):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
