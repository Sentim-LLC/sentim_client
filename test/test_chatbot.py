# coding: utf-8

"""
    Sentim's Emotion APIs

    An emotion recognition api that tells you the emotion of text, and not just the connotation.  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Contact: help@sentimllc.com
    Generated by: https://openapi-generator.tech
"""


from __future__ import absolute_import

import unittest

import sentim
from sentim.rest import ApiException
from pprint import pprint

class TestChatbotApi(unittest.TestCase):
  """Test each method of the chatbot api."""
  
  @classmethod
  def setUpClass(cls):
    configuration = sentim.Configuration()
    # Defining host is optional and default to https://api.sentimllc.com
    configuration.host = "https://api.sentimllc.com"
    # Create an instance of the API class to request an api token
    cls.api_instance = sentim.DefaultApi(sentim.ApiClient(configuration))
    
    path_to_credentials = "/path/to/credentials"
    with open(path_to_credentials, "r") as f:
      client_id, client_secret = f.readlines()[1].split(",")
      # Configure OAuth2 access token for authorization: sentim_auth
      configuration.access_token = cls.api_instance.get_access_token(client_id, client_secret)
      #override instance with access token now that we've authenticated
      cls.api_instance = sentim.DefaultApi(sentim.ApiClient(configuration))

  def tearDown(self):
    pass

  def test_score_chatbot_effect(self):
    """Test case for score_chatbot_effect

    Score the effectiveness of the last chatbot message in a conversation  # noqa: E501
    """
    conv = sentim.Conversation(["Hello!", "Hello, how can I help you?", "I'd like to get a car.", "What kind of car?", "A truck."], lang="Eng")
    api_response = self.api_instance.score_chatbot_effect(conv)
    pprint(api_response)
    assert(isinstance(api_response, float))
    
  def test_score_chatbot_conversation(self):
    """Test case for score_chatbot_conversation

    Score the effectiveness of every chatbot message in a conversation  # noqa: E501
    """
    conv = sentim.Conversation(["Hello!", "Hello, how can I help you?", "I'm having issues with the site.", "I'm sorry to hear that. What is happening specifically?", 
                                              "After I click on the link provided, the webpage keeps saying it's not found.", "Can you access google.com?", "Why does that matter?",
                                              "I just want to check if you are connected to the internet.", "Yeah, I can access google.com", "Okay, great! Can you access our home page?",
                                              "Yes, I can access everything except the link that you sent me! AHHHHH!", "Okay, I've sent you a new link. Can you check to see if the new link works?",
                                              "Yea... one second. Yeap. The link works. Thanks!", "Not a problem. Is there anything else I can help you with today?", "Nope! Goodbye."], lang="Eng")
    api_response = self.api_instance.score_chatbot_conversation(conv)
    pprint(api_response)
    assert(isinstance(api_response, sentim.ConversationResponse))
    assert(len(api_response.error_list) == 0)
    assert(len(api_response.result_list) == 7)
    
  def test_ignore_first(self):
    """Test the results for calling score_chatbot_conversation with ignore_first = True
    """
    conv = sentim.Conversation(["I'm sure she knew you loved her. Did she pass away in the hospital?", "Yeah. She died in her sleep.", "I'm sorry she's gone.", "At least she didn't suffer.", "I know. But I miss her."], 
                               lang="Eng", 
                               ignore_first=True)
    api_response = self.api_instance.score_chatbot_conversation(conv)
    pprint(api_response)
    assert(isinstance(api_response, sentim.ConversationResponse))
    assert(len(api_response.error_list) == 0)
    assert(len(api_response.result_list) == 1)
    assert(api_response.result_list[0].index == 3)


if __name__ == '__main__':
    unittest.main()
